name: Deployment AWS

on:
  push:
    branches:
      - deploy1

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  EDS_API_URL_SECRET: ${{ secrets.EDS_API_URL }}
  EDS_AUTH_URL_SECRET: ${{ secrets.EDS_AUTH_URL }}
  LAMBDA_FUNCTION: ${{ secrets.LAMBDA_FUNCTION }}
  DEPLOY_ECS: false
  DEPLOY_LAMBDA: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_EDS_API_URL: ${{ secrets.EDS_API_URL }}
          envkey_EDS_AUTH_URL: ${{ secrets.EDS_AUTH_URL }}
          envkey_INPUT_JSON_PATH: "data/processor_input_example.json"
          file_name: .env
          fail_on_empty: false
          sort_keys: false

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::489065051964:role/GitHubActionProcessor-AssumeRoleWithAction #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_gitaction_devOps
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.      
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"
          echo "::set-output name=ECR_REGISTRY::$ECR_REGISTRY"

      # - name: Deploy ECS
      #   if: ${{ env.DEPLOY_ECS == 'true' }}
      #   uses: .github/actions/Deploy_ECS.yml
      #   with:
      #     image_tag: ${{ steps.build-image.outputs.IMAGE_TAG }}
      #     ecr_registry: ${{ steps.build-image.outputs.ECR_REGISTRY }}

      - name: Deploy Package
        if: ${{ env.DEPLOY_LAMBDA == 'true' }}
        uses: ./.github/actions/deploy_Lambda/action.yml
        with:
          image_tag: ${{ steps.build-image.outputs.IMAGE_TAG }}
          ecr_registry: ${{ steps.build-image.outputs.ECR_REGISTRY }}
